[{"/Users/danielmurphy/Code/the-best-text/src/index.js":"1","/Users/danielmurphy/Code/the-best-text/src/the-best-text.js":"2"},{"size":265,"mtime":1608149688157,"results":"3","hashOfConfig":"4"},{"size":2182,"mtime":1608524428793,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fc2esl",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/danielmurphy/Code/the-best-text/src/index.js",[],"/Users/danielmurphy/Code/the-best-text/src/the-best-text.js",["11"],"import React from \"react\";\n\nclass TheBestText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { transformedText: [] };\n  }\n\n  render() {\n    return (\n      <div className=\"the-best-text\">\n        <input\n          placeholder=\"type stuff here\"\n          type=\"text\"\n          id=\"input\"\n          onChange={this.handleChange}\n          value={this.state.inputValue}\n        />\n        <div className=\"letter-container\">\n          {this.state.transformedText.map((c) => this.getLetterImg(c, \"white\"))}\n          {this.state.transformedText.length > 0 ? (\n            <button onClick={(e) => this.handleCopy(\"white\")}>copy</button>\n          ) : (\n            \"\"\n          )}\n        </div>\n        <div className=\"letter-container\">\n          {this.state.transformedText.map((c) =>\n            this.getLetterImg(c, \"yellow\")\n          )}\n          {this.state.transformedText.length > 0 ? (\n            <button onClick={(e) => this.handleCopy(\"yellow\")}>copy</button>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  getLetterImg = (c, color) => {\n    if (c === \" \") {\n      return <span style={{ display: \"inline-block\", width: \"50px\" }} />;\n    } else {\n      return (\n        <img className=\"letter\" src={`/alphabet/${color}-${c}.png`} alt={c} />\n      );\n    }\n  };\n\n  handleCopy = (color) => {\n    let emojis = this.state.transformedText.map((c) => {\n      if (c === \" \") {\n        return \"  \";\n      } else {\n        return `:alphabet-${color}-${c}:`;\n      }\n    });\n    navigator.clipboard.writeText(emojis.join(\"\"));\n  };\n\n  handleChange = (event) => {\n    let transformedText = event.target.value.toLowerCase().split(\"\");\n    transformedText = transformedText.map((c) => {\n      if (c.match(/[a-z]/)) {\n        return c;\n      } else if (c === \"@\") {\n        return \"at\";\n      } else if (c === \"!\") {\n        return \"exclamation\";\n      } else if (c === \"?\") {\n        return \"question\";\n      } else if (c === \"#\") {\n        return \"hash\";\n      } else if (c === \" \") {\n        return \" \";\n      }\n    });\n    this.setState({ transformedText: transformedText });\n  };\n}\n\nexport default TheBestText;\n",{"ruleId":"12","severity":1,"message":"13","line":64,"column":47,"nodeType":"14","messageId":"15","endLine":64,"endColumn":49},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd"]